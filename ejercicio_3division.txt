section .data
    num1    db 5      
    num2    db 3       
    result  db 0      

section .text
    global _start

_start:
  
    mov al, [num1]
    mov bl, [num2]


    mul bl

    mov [result], al

    movzx eax, byte [result]
    call print_num

    mov eax, 1          
    xor ebx, ebx        
    int 80h

print_num:
   
    mov ecx, 10         
    mov ebx, 0           
.next_digit:
    xor edx, edx        
    div ecx              
    add dl, '0'          
    push dx              
    inc ebx              
    test eax, eax        
    jnz .next_digit      
.print_loop:
    pop eax              
    mov [result], al   
    mov eax, 4           
    mov ebx, 1           
    mov ecx, result      
    mov edx, 1          
    int 80h             
    dec ebx              
    jnz .print_loop      
    ret